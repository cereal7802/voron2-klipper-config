Loaded MCU 'EBBCan' 109 commands (v0.11.0-240-g6d48adf9 / gcc: (15:8-2019-q3-1+b1) 8.3.1 20190703 (release) [gcc-8-branch revision 273027] binutils: (2.35.2-2+14+b2) 2.35.2)
MCU 'EBBCan' config: ADC_MAX=4095 BUS_PINS_i2c1_PA9_PA10=PA9,PA10 BUS_PINS_i2c1_PB6_PB7=PB6,PB7 BUS_PINS_i2c1_PB8_PB9=PB8,PB9 BUS_PINS_i2c2_PB10_PB11=PB10,PB11 BUS_PINS_i2c2_PB13_PB14=PB13,PB14 BUS_PINS_i2c3_PB3_PB4=PB3,PB4 BUS_PINS_spi1=PA6,PA7,PA5 BUS_PINS_spi1a=PB4,PB5,PB3 BUS_PINS_spi2=PB14,PB15,PB13 BUS_PINS_spi2a=PC2,PC3,PB10 BUS_PINS_spi3=PB4,PB5,PB3 CANBUS_FREQUENCY=1000000 CLOCK_FREQ=64000000 MCU=stm32g0b1xx PWM_MAX=255 RECEIVE_WINDOW=192 RESERVE_PINS_CAN=PB0,PB1 RESERVE_PINS_crystal=PF0,PF1 STATS_SUMSQ_BASE=256 STEPPER_BOTH_EDGE=1
Configured MCU 'EBBCan' (1024 moves)
===== Config file =====
[exclude_object]

[gcode_arcs]
resolution = 0.1

[temperature_sensor raspberry_pi]
sensor_type = temperature_host
min_temp = 10
max_temp = 100

[temperature_sensor mcu_temp]
sensor_type = temperature_mcu
sensor_mcu = mcu
min_temp = 0
max_temp = 100

[temperature_sensor mcu_EBBCan]
sensor_type = temperature_mcu
sensor_mcu = EBBCan
min_temp = 0
max_temp = 100

[mcu]
serial = /dev/serial/by-id/usb-Klipper_stm32g0b1xx_3F00280011504B4633373520-if00
restart_method = command

[printer]
kinematics = corexy
max_velocity = 500
max_accel = 12000
max_z_velocity = 20
max_z_accel = 350

[stepper_x]
step_pin = PE2
dir_pin = PB4
enable_pin = !PC11
rotation_distance = 40
microsteps = 16
full_steps_per_rotation = 400
endstop_pin = PF3
position_endstop = 300
position_max = 300
position_min = -10
homing_speed = 100
homing_retract_dist = 5
homing_positive_dir = true

[stepper_y]
step_pin = PF12
dir_pin = PF11
enable_pin = !PB3
rotation_distance = 40
microsteps = 16
full_steps_per_rotation = 400
endstop_pin = PF4
position_endstop = 300
position_min = -5
position_max = 300
homing_speed = 100
homing_retract_dist = 5
homing_positive_dir = true

[stepper_z]
step_pin = PD7
dir_pin = PD6
enable_pin = !PF10
rotation_distance = 40
gear_ratio = 80:16
microsteps = 16
endstop_pin = PF5
position_min = -5
position_max = 260
homing_speed = 8
second_homing_speed = 3.0
homing_retract_dist = 3.0
position_endstop = -0.950

[stepper_z1]
step_pin = PD3
dir_pin = !PD2
enable_pin = !PD5
rotation_distance = 40
gear_ratio = 80:16
microsteps = 16

[stepper_z2]
step_pin = PC9
dir_pin = PC8
enable_pin = !PD1
rotation_distance = 40
gear_ratio = 80:16
microsteps = 16

[stepper_z3]
step_pin = PA10
dir_pin = !PD15
enable_pin = !PA15
rotation_distance = 40
gear_ratio = 80:16
microsteps = 16

[tmc2240 stepper_x]
cs_pin = PC10
spi_software_sclk_pin = PA5
spi_software_mosi_pin = PA7
spi_software_miso_pin = PA6
interpolate = False
run_current = 0.99
stealthchop_threshold = 99999

[tmc2240 stepper_y]
cs_pin = PF13
spi_software_sclk_pin = PA5
spi_software_mosi_pin = PA7
spi_software_miso_pin = PA6
interpolate = False
run_current = 0.99
stealthchop_threshold = 99999

[tmc2240 stepper_z]
cs_pin = PF9
spi_software_sclk_pin = PA5
spi_software_mosi_pin = PA7
spi_software_miso_pin = PA6
interpolate = True
run_current = 1
stealthchop_threshold = 999

[tmc2240 stepper_z1]
cs_pin = PD4
spi_software_sclk_pin = PA5
spi_software_mosi_pin = PA7
spi_software_miso_pin = PA6
interpolate = True
run_current = 1
stealthchop_threshold = 999

[tmc2240 stepper_z2]
cs_pin = PD0
spi_software_sclk_pin = PA5
spi_software_mosi_pin = PA7
spi_software_miso_pin = PA6
interpolate = True
run_current = 1
stealthchop_threshold = 999

[tmc2240 stepper_z3]
cs_pin = PF8
spi_software_sclk_pin = PA5
spi_software_mosi_pin = PA7
spi_software_miso_pin = PA6
interpolate = True
run_current = 1
stealthchop_threshold = 999

[heater_bed]
heater_pin = PB7
sensor_type = ATC Semitec 104NT-4-R025H42G
sensor_pin = PA0
max_power = 0.6
min_temp = 0
max_temp = 120
control = pid
pid_kp = 38.949
pid_ki = 1.105
pid_kd = 343.234

[controller_fan controller_fan]
pin = PE6
kick_start_time = 0.5
heater = heater_bed
fan_speed = 0.5

[fan_generic nevermore]
pin = PE0
max_power = 1.0
shutdown_speed = 0.0
kick_start_time = 5.0

[output_pin caselight]
pin = PE5
pwm = true
shutdown_value = 0
value = 1.0
cycle_time = 0.001

[idle_timeout]
timeout = 1800
gcode = 
	M84
	TURN_OFF_HEATERS
	status_off
	SET_PIN PIN=caselight VALUE=0.00
	SET_LED LED="btt_mini12864" RED=0 GREEN=0 BLUE=0 SYNC=0 TRANSMIT=1

[safe_z_home]
home_xy_position = 210, 300
speed = 100
z_hop = 10
z_hop_speed = 10

[quad_gantry_level]
gantry_corners = 
	-60,-10
	360,370
points = 
	50,25
	50,225
	250,225
	250,25
speed = 200
horizontal_move_z = 10
retries = 5
retry_tolerance = 0.005
max_adjust = 10

[board_pins]
aliases = 
	
	EXP1_1=PE9, EXP1_2=PE10,
	EXP1_3=PE11, EXP1_4=PE12,
	EXP1_5=PE13, EXP1_6=PE14,
	EXP1_7=PE15, EXP1_8=PB10,
	EXP1_9=<GND>, EXP1_10=<5V>,
	
	
	EXP2_1=PB14, EXP2_2=PB13,
	EXP2_3=PF7, EXP2_4=PB12,
	EXP2_5=PE7, EXP2_6=PB11,
	EXP2_7=PE8, EXP2_8=<RST>,
	EXP2_9=<GND>, EXP2_10=PC5

[display]
lcd_type = uc1701
cs_pin = EXP1_3
a0_pin = EXP1_4
rst_pin = EXP1_5
encoder_pins = ^EXP2_5, ^EXP2_3
click_pin = ^!EXP1_2
contrast = 63
spi_software_miso_pin = EXP2_1
spi_software_mosi_pin = EXP2_6
spi_software_sclk_pin = EXP2_2

[neopixel btt_mini12864]
pin = EXP1_6
chain_count = 3
initial_red = 0.0
initial_green = 0.0
initial_blue = 1.0
color_order = RGB

[delayed_gcode setdisplayneopixel]
initial_duration = 1
gcode = 
	SET_LED LED=btt_mini12864 RED=0 GREEN=0 BLUE=1 INDEX=1 TRANSMIT=0
	SET_LED LED=btt_mini12864 RED=0 GREEN=0 BLUE=1 INDEX=2 TRANSMIT=0
	SET_LED LED=btt_mini12864 RED=0 GREEN=0 BLUE=1 INDEX=3

[bed_mesh]
speed = 200
horizontal_move_z = 10
mesh_min = 40, 40
mesh_max = 260,260
fade_start = 0.6
fade_end = 10.0
probe_count = 5,5
algorithm = bicubic

[filament_motion_sensor encoder_sensor]
detection_length = 200
extruder = extruder
switch_pin = ^PC2
pause_on_runout = True
runout_gcode = 
	LCDRGB R=1 G=0 B=0
	PAUSE

[mcu EBBCan]
canbus_uuid = d462d7069bed

[temperature_sensor chamber]
sensor_type = Generic 3950
sensor_pin = EBBCan: PA2

[adxl345]
cs_pin = EBBCan: PB12
spi_software_sclk_pin = EBBCan: PB10
spi_software_mosi_pin = EBBCan: PB11
spi_software_miso_pin = EBBCan: PB2
axes_map = z,-y,x

[resonance_tester]
probe_points = 150, 150, 20
accel_chip = adxl345

[extruder]
step_pin = EBBCan: PD0
dir_pin = EBBCan: PD1
enable_pin = !EBBCan: PD2
rotation_distance = 23.577903446
gear_ratio = 50:10
microsteps = 16
full_steps_per_rotation = 200
nozzle_diameter = 0.400
filament_diameter = 1.75
heater_pin = EBBCan: PB13
sensor_type = ATC Semitec 104NT-4-R025H42G
sensor_pin = EBBCan: PA3
min_temp = -273
min_extrude_temp = -270
max_temp = 300
max_extrude_only_distance = 125.0
control = pid
pid_kp = 34.216
pid_ki = 4.073
pid_kd = 71.855

[tmc2240 extruder]
cs_pin = EBBCan: PA15
spi_software_sclk_pin = EBBCan: PB10
spi_software_mosi_pin = EBBCan: PB11
spi_software_miso_pin = EBBCan: PB2
driver_tpfd = 0
run_current = 0.7
interpolate = False
stealthchop_threshold = 0

[fan]
pin = EBBCan: PA1
kick_start_time = 0.5
off_below = 0.10

[heater_fan hotend_fan]
pin = EBBCan: PA0
heater = extruder
heater_temp = 45.0

[probe]
pin = ^EBBCan: PC13
x_offset = 0
y_offset = 25.0
speed = 10.0
samples = 3
samples_result = median
sample_retract_dist = 3.0
samples_tolerance = 0.05
samples_tolerance_retries = 3
z_offset = 4.525

[firmware_retraction]
retract_length = 0.8
retract_speed = 30
unretract_extra_length = 0
unretract_speed = 30

[autotune_tmc stepper_x]
motor = ldo-42sth40-2004mah
tuning_goal = performance

[autotune_tmc stepper_y]
motor = ldo-42sth40-2004mah
tuning_goal = performance

[autotune_tmc stepper_z]
motor = ldo-42sth48-2004ac
tuning_goal = performance

[autotune_tmc stepper_z1]
motor = ldo-42sth48-2004ac
tuning_goal = performance

[autotune_tmc stepper_z2]
motor = ldo-42sth48-2004ac
tuning_goal = performance

[autotune_tmc stepper_z3]
motor = ldo-42sth48-2004ac
tuning_goal = performance

[autotune_tmc extruder]
motor = ldo-36sth20-1004ahg
tuning_goal = performance

[virtual_sdcard]
path = ~/printer_data/gcodes
on_error_gcode = CANCEL_PRINT

[pause_resume]

[display_status]

[gcode_macro CANCEL_PRINT]
description = Cancel the actual running print
rename_existing = BASE_CANCEL_PRINT
gcode = 
	SET_IDLE_TIMEOUT TIMEOUT={printer.configfile.settings.idle_timeout.timeout}
	CLEAR_PAUSE
	SDCARD_RESET_FILE
	PRINT_END
	BASE_CANCEL_PRINT

[gcode_macro PAUSE]
description = Pause the actual running print
rename_existing = BASE_PAUSE
variable_restore_idle_timeout = 0
gcode = 
	
	{% set z = params.Z|default(10)|int %}
	
	{% if printer['pause_resume'].is_paused|int == 0 %}
	SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=zhop VALUE={z}
	SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=etemp VALUE={printer['extruder'].target}
	
	SET_FILAMENT_SENSOR SENSOR=encoder_sensor ENABLE=0
	SAVE_GCODE_STATE NAME=PAUSE
	BASE_PAUSE
	{% if (printer.gcode_move.position.z + z) < printer.toolhead.axis_maximum.z %}
	G91
	G1 Z{z} F900
	{% else %}
	{ action_respond_info("Pause zhop exceeds maximum Z height.") }
	SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=zhop VALUE=0
	{% endif %}
	G90
	G1 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_minimum.y+5} F6000
	SAVE_GCODE_STATE NAME=PAUSEPARK
	M104 S0
	SET_IDLE_TIMEOUT TIMEOUT=43200
	{% endif %}

[gcode_macro RESUME]
description = Resume the actual running print
rename_existing = BASE_RESUME
variable_last_extruder_temp = 0
gcode = 
	
	{% set e = params.E|default(2.5)|int %}
	
	{% if printer['pause_resume'].is_paused|int == 1 %}
	SET_FILAMENT_SENSOR SENSOR=encoder_sensor ENABLE=1
	
	SET_IDLE_TIMEOUT TIMEOUT={printer.configfile.settings.idle_timeout.timeout}
	{% if etemp > 0 %}
	M109 S{etemp|int}
	{% endif %}
	RESTORE_GCODE_STATE NAME=PAUSEPARK MOVE=1 MOVE_SPEED=100
	G91
	M83
	{% if printer[printer.toolhead.extruder].temperature >= printer.configfile.settings.extruder.min_extrude_temp %}
	G1 Z{zhop * -1} E{e} F900
	{% else %}
	G1 Z{zhop * -1} F900
	{% endif %}
	RESTORE_GCODE_STATE NAME=PAUSE MOVE=1 MOVE_SPEED=60
	BASE_RESUME
	{% endif %}
variable_zhop = 0
variable_etemp = 0

[gcode_macro SET_PAUSE_NEXT_LAYER]
description = Enable a pause if the next layer is reached
gcode = 
	{% set pause_next_layer = printer['gcode_macro SET_PRINT_STATS_INFO'].pause_next_layer %}
	{% set ENABLE = params.ENABLE|default(1)|int != 0 %}
	{% set MACRO = params.MACRO|default(pause_next_layer.call, True) %}
	SET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_next_layer VALUE="{{ 'enable': ENABLE, 'call': MACRO }}"

[gcode_macro SET_PAUSE_AT_LAYER]
description = Enable/disable a pause if a given layer number is reached
gcode = 
	{% set pause_at_layer = printer['gcode_macro SET_PRINT_STATS_INFO'].pause_at_layer %}
	{% set ENABLE = params.ENABLE|int != 0 if params.ENABLE is defined
	else params.LAYER is defined %}
	{% set LAYER = params.LAYER|default(pause_at_layer.layer)|int %}
	{% set MACRO = params.MACRO|default(pause_at_layer.call, True) %}
	SET_GCODE_VARIABLE MACRO=SET_PRINT_STATS_INFO VARIABLE=pause_at_layer VALUE="{{ 'enable': ENABLE, 'layer': LAYER, 'call': MACRO }}"

[gcode_macro SET_PRINT_STATS_INFO]
rename_existing = SET_PRINT_STATS_INFO_BASE
description = Overwrite, to get pause_next_layer and pause_at_layer feature
variable_pause_next_layer = { 'enable': False, 'call': "PAUSE" }
variable_pause_at_layer = { 'enable': False, 'layer': 0, 'call': "PAUSE" }
gcode = 
	{% if pause_next_layer.enable %}
	{action_respond_info("%s, forced by pause_next_layer" % pause_next_layer.call)}
	{pause_next_layer.call}
	SET_PAUSE_NEXT_LAYER ENABLE=0
	{% elif pause_at_layer.enable and params.CURRENT_LAYER is defined and params.CURRENT_LAYER|int == pause_at_layer.layer %}
	{action_respond_info("%s, forced by pause_at_layer [%d]" % (pause_at_layer.call, pause_at_layer.layer))}
	{pause_at_layer.call}
	SET_PAUSE_AT_LAYER ENABLE=0
	{% endif %}
	SET_PRINT_STATS_INFO_BASE {rawparams}

[gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL]
description = Helper: park toolhead used in PAUSE and CANCEL_PRINT
gcode = 
	
	{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}
	{% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}
	{% set use_custom     = client.use_custom_pos|default(false)|lower == 'true' %}
	{% set custom_park_x  = client.custom_park_x|default(0.0) %}
	{% set custom_park_y  = client.custom_park_y|default(0.0) %}
	{% set park_dz        = client.custom_park_dz|default(2.0)|abs %}
	{% set sp_hop         = client.speed_hop|default(15) * 60 %}
	{% set sp_move        = client.speed_move|default(velocity) * 60 %}
	
	{% set origin    = printer.gcode_move.homing_origin %}
	{% set act       = printer.gcode_move.gcode_position %}
	{% set max       = printer.toolhead.axis_maximum %}
	{% set cone      = printer.toolhead.cone_start_z|default(max.z) %}
	{% set round_bed = True if printer.configfile.settings.printer.kinematics is in ['delta','polar','rotary_delta','winch']
	else False %}
	
	{% set z_min = params.Z_MIN|default(0)|float %}
	{% set z_park = [[(act.z + park_dz), z_min]|max, (max.z - origin.z)]|min %}
	{% set x_park = params.X       if params.X is defined
	else custom_park_x  if use_custom
	else 0.0            if round_bed
	else (max.x - 5.0) %}
	{% set y_park = params.Y       if params.Y is defined
	else custom_park_y  if use_custom
	else (max.y - 5.0)  if round_bed and z_park < cone
	else 0.0            if round_bed
	else (max.y - 5.0) %}
	
	_CLIENT_RETRACT
	{% if "xyz" in printer.toolhead.homed_axes %}
	G90
	G1 Z{z_park} F{sp_hop}
	G1 X{x_park} Y{y_park} F{sp_move}
	{% if not printer.gcode_move.absolute_coordinates %} G91 {% endif %}
	{% else %}
	{action_respond_info("Printer not homed")}
	{% endif %}

[gcode_macro _CLIENT_EXTRUDE]
description = Extrudes, if the extruder is hot enough
gcode = 
	{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}
	{% set use_fw_retract = (client.use_fw_retract|default(false)|lower == 'true') and (printer.firmware_retraction is defined) %}
	{% set length = params.LENGTH|default(client.unretract)|default(1.0)|float %}
	{% set speed = params.SPEED|default(client.speed_unretract)|default(35) %}
	{% set absolute_extrude = printer.gcode_move.absolute_extrude %}
	
	{% if printer.extruder.can_extrude %}
	{% if use_fw_retract %}
	{% if length < 0 %}
	G10
	{% else %}
	G11
	{% endif %}
	{% else %}
	M83
	G1 E{length} F{(speed|float|abs) * 60}
	{% if absolute_extrude %}
	M82
	{% endif %}
	{% endif %}
	{% else %}
	{action_respond_info("Extruder not hot enough")}
	{% endif %}

[gcode_macro _CLIENT_RETRACT]
description = Retracts, if the extruder is hot enough
gcode = 
	{% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}
	{% set length = params.LENGTH|default(client.retract)|default(1.0)|float %}
	{% set speed = params.SPEED|default(client.speed_retract)|default(35) %}
	
	_CLIENT_EXTRUDE LENGTH=-{length|float|abs} SPEED={speed|float|abs}

[gcode_macro PRINT_START]
gcode = 
	
	{% set target_bed = params.BED|int %}
	{% set target_extruder = params.EXTRUDER|int %}
	{% set target_chamber = params.CHAMBER|default("40")|int %}
	{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}
	{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}
	
	SET_PIN PIN=caselight VALUE=1.0
	
	
	status_homing
	G28
	G90
	
	
	BED_MESH_CLEAR
	
	
	{% if params.BED|int > 90 %}
	SET_DISPLAY_TEXT MSG="Bed: {target_bed}c"
	status_heating
	M106 S255
	
	
	
	
	G1 X{x_wait} Y{y_wait} Z15 F9000
	M190 S{target_bed}
	SET_DISPLAY_TEXT MSG="Heatsoak: {target_chamber}c"
	TEMPERATURE_WAIT SENSOR="temperature_sensor chamber" MINIMUM={target_chamber}
	
	
	{% else %}
	SET_DISPLAY_TEXT MSG="Bed: {target_bed}c"
	status_heating
	G1 X{x_wait} Y{y_wait} Z15 F9000
	M190 S{target_bed}
	SET_DISPLAY_TEXT MSG="Soak for 2.5min"
	G4 P150000
	{% endif %}
	
	
	SET_DISPLAY_TEXT MSG="Hotend: 150c"
	M109 S150
	
	
	
	
	
	
	
	
	SET_DISPLAY_TEXT MSG="QGL"
	status_leveling
	quad_gantry_level
	G28 Z
	
	
	
	
	
	
	SET_DISPLAY_TEXT MSG="Bed mesh"
	status_meshing
	bed_mesh_calibrate
	
	
	SET_DISPLAY_TEXT MSG="Hotend: {target_extruder}c"
	status_heating
	G1 X{x_wait} Y{y_wait} Z15 F9000
	M107
	M109 S{target_extruder}
	
	
	SET_DISPLAY_TEXT MSG="Printer goes brr"
	status_printing
	G0 X{x_wait - 50} Y4 F10000
	G0 Z0.4
	G91
	G1 X100 E20 F1000
	G90
	SET_FILAMENT_SENSOR SENSOR=encoder_sensor ENABLE=1

[gcode_macro PRINT_END]
gcode = 
	
	{% set th = printer.toolhead %}
	{% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}
	{% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}
	{% set z_safe = [th.position.z + 10, th.axis_maximum.z]|min %}
	
	SAVE_GCODE_STATE NAME=STATE_PRINT_END
	
	M400
	G92 E0
	G1 E-5.0 F1800
	
	TURN_OFF_HEATERS
	
	G90
	G0 X{x_safe} Y{y_safe} Z{z_safe} F20000
	G0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2} F3600
	M107
	
	BED_MESH_CLEAR
	RESTORE_GCODE_STATE NAME=STATE_PRINT_END
	
	SET_FILAMENT_SENSOR SENSOR=encoder_sensor ENABLE=0

[gcode_macro MAYBE_HOME]
description = Only home unhomed axis
variable_is_kinematic_position_overriden = False
gcode = 
	{% if printer["gcode_macro MAYBE_HOME"].is_kinematic_position_overriden|lower == 'true' %}
	RESPOND MSG="SET_CENTER_KINEMATIC_POSITION has been abused. Homing all axes. Please refrain from using SET_CENTER_KINEMATIC_POSITION outside of debugging purposes."
	G28
	SET_GCODE_VARIABLE MACRO=MAYBE_HOME VARIABLE=is_kinematic_position_overriden VALUE=False
	{% else %}
	{% set axes = '' %}
	{% set isHomed = true %}
	{% set axesToHome = '' %}
	{% if params.X is defined %}
	{% set axes = axes ~ 'X ' %}
	{% if 'x' not in printer.toolhead.homed_axes %}
	{% set isHomed = false %}
	{% set axesToHome = axesToHome ~ 'X ' %}
	{% endif %}
	{% endif %}
	{% if params.Y is defined %}
	{% set axes = axes ~ 'Y ' %}
	{% if 'y' not in printer.toolhead.homed_axes %}
	{% set isHomed = false %}
	{% set axesToHome = axesToHome ~ 'Y ' %}
	{% endif %}
	{% endif %}
	{% if params.Z is defined %}
	{% set axes = axes ~ 'Z ' %}
	{% if 'z' not in printer.toolhead.homed_axes %}
	{% set isHomed = false %}
	{% set axesToHome = axesToHome ~ 'Z ' %}
	{% endif %}
	{% endif %}
	{% if params.X is not defined and params.Y is not defined and params.Z is not defined %}
	{% set axes = '' %}
	{% if 'x' not in printer.toolhead.homed_axes %}
	{% set isHomed = false %}
	{% set axesToHome = axesToHome ~ 'X ' %}
	{% endif %}
	{% if 'y' not in printer.toolhead.homed_axes %}
	{% set isHomed = false %}
	{% set axesToHome = axesToHome ~ 'Y ' %}
	{% endif %}
	{% if 'z' not in printer.toolhead.homed_axes %}
	{% set isHomed = false %}
	{% set axesToHome = axesToHome ~ 'Z ' %}
	{% endif %}
	{% endif %}
	{% if isHomed is false %}
	M117 Homing {axesToHome}
	RESPOND MSG="Homing {axesToHome}"
	status_homing
	G28 {axesToHome}
	status_leveling
	QUAD_GANTRY_LEVEL
	{% else %}
	RESPOND MSG="All requested axes already homed, skipping.."
	{% endif %}
	{% endif %}
	smart_park
	status_ready

[gcode_macro TEST_SPEED]
gcode = 
	
	{% set speed  = params.SPEED|default(printer.configfile.settings.printer.max_velocity)|int %}
	
	{% set iterations = params.ITERATIONS|default(5)|int %}
	
	{% set accel  = params.ACCEL|default(printer.configfile.settings.printer.max_accel)|int %}
	
	{% set bound = params.BOUND|default(20)|int %}
	
	{% set smallpatternsize = SMALLPATTERNSIZE|default(20)|int %}
	
	
	
	{% set x_min = printer.toolhead.axis_minimum.x + bound %}
	{% set x_max = printer.toolhead.axis_maximum.x - bound %}
	{% set y_min = printer.toolhead.axis_minimum.y + bound %}
	{% set y_max = printer.toolhead.axis_maximum.y - bound %}
	
	
	
	{% set x_center = (printer.toolhead.axis_minimum.x|float + printer.toolhead.axis_maximum.x|float ) / 2 %}
	{% set y_center = (printer.toolhead.axis_minimum.y|float + printer.toolhead.axis_maximum.y|float ) / 2 %}
	
	
	{% set x_center_min = x_center - (smallpatternsize/2) %}
	{% set x_center_max = x_center + (smallpatternsize/2) %}
	{% set y_center_min = y_center - (smallpatternsize/2) %}
	{% set y_center_max = y_center + (smallpatternsize/2) %}
	
	
	SAVE_GCODE_STATE NAME=TEST_SPEED
	
	
	{ action_respond_info("TEST_SPEED: starting %d iterations at speed %d, accel %d" % (iterations, speed, accel)) }
	
	
	G28
	
	{% if printer.configfile.settings.quad_gantry_level %}
	{% if printer.quad_gantry_level.applied == False %}
	QUAD_GANTRY_LEVEL
	G28 Z
	{% endif %}
	{% endif %}
	G90
	G0 X{printer.toolhead.axis_maximum.x-1} Y{printer.toolhead.axis_maximum.y-1} F{30*60}
	G4 P1000
	GET_POSITION
	
	
	G0 X{x_min} Y{y_min} Z{bound + 10} F{speed*60}
	
	
	SET_VELOCITY_LIMIT VELOCITY={speed} ACCEL={accel} ACCEL_TO_DECEL={accel / 2}
	
	{% for i in range(iterations) %}
	
	
	G0 X{x_min} Y{y_min} F{speed*60}
	G0 X{x_max} Y{y_max} F{speed*60}
	G0 X{x_min} Y{y_min} F{speed*60}
	G0 X{x_max} Y{y_min} F{speed*60}
	G0 X{x_min} Y{y_max} F{speed*60}
	G0 X{x_max} Y{y_min} F{speed*60}
	
	
	G0 X{x_min} Y{y_min} F{speed*60}
	G0 X{x_min} Y{y_max} F{speed*60}
	G0 X{x_max} Y{y_max} F{speed*60}
	G0 X{x_max} Y{y_min} F{speed*60}
	
	
	
	G0 X{x_center_min} Y{y_center_min} F{speed*60}
	G0 X{x_center_max} Y{y_center_max} F{speed*60}
	G0 X{x_center_min} Y{y_center_min} F{speed*60}
	G0 X{x_center_max} Y{y_center_min} F{speed*60}
	G0 X{x_center_min} Y{y_center_max} F{speed*60}
	G0 X{x_center_max} Y{y_center_min} F{speed*60}
	
	
	G0 X{x_center_min} Y{y_center_min} F{speed*60}
	G0 X{x_center_min} Y{y_center_max} F{speed*60}
	G0 X{x_center_max} Y{y_center_max} F{speed*60}
	G0 X{x_center_max} Y{y_center_min} F{speed*60}
	{% endfor %}
	
	
	SET_VELOCITY_LIMIT VELOCITY={printer.configfile.settings.printer.max_velocity} ACCEL={printer.configfile.settings.printer.max_accel} ACCEL_TO_DECEL={printer.configfile.settings.printer.max_accel_to_decel}
	
	
	G28
	
	G90
	G0 X{printer.toolhead.axis_maximum.x-1} Y{printer.toolhead.axis_maximum.y-1} F{30*60}
	G4 P1000
	GET_POSITION
	
	
	RESTORE_GCODE_STATE NAME=TEST_SPEED

[gcode_macro FILAMENT_LOAD]
gcode = 
	M83
	G92 E0.0
	G1 E120 F350
	G92 E0.0
	M82

[gcode_macro LCDRGB]
gcode = 
	{% set r = params.R|default(1)|float %}
	{% set g = params.G|default(1)|float %}
	{% set b = params.B|default(1)|float %}
	
	SET_LED LED="btt_mini12864" RED={r} GREEN={g} BLUE={b} INDEX=1 TRANSMIT=0
	SET_LED LED="btt_mini12864" RED={r} GREEN={g} BLUE={b} INDEX=2 TRANSMIT=0
	SET_LED LED="btt_mini12864" RED={r} GREEN={g} BLUE={b} INDEX=3

[gcode_macro RESETRGB]
gcode = 
	SET_LED LED="btt_mini12864" RED=1 GREEN=0.45 BLUE=0.4 INDEX=1 TRANSMIT=0
	SET_LED LED="btt_mini12864" RED=0.25 GREEN=0.2 BLUE=0.15 INDEX=2 TRANSMIT=0
	SET_LED LED="btt_mini12864" RED=0.25 GREEN=0.2 BLUE=0.15 INDEX=3

[delayed_gcode SETDISPLAYNEOPIXEL]
initial_duration = 1
gcode = 
	RESETRGB

[gcode_macro M600]
gcode = 
	LCDRGB R=0 G=1 B=0
	PAUSE

[delayed_gcode DISABLEFILAMENTSENSOR]
initial_duration = 1
gcode = 
	SET_FILAMENT_SENSOR SENSOR=encoder_sensor ENABLE=0

[respond]
default_type = echo

[gcode_macro _KAMP_Settings]
description = This macro contains all adjustable settings for KAMP
variable_verbose_enable = True
variable_mesh_margin = 0
variable_fuzz_amount = 0
variable_probe_dock_enable = False
variable_attach_macro = 'Attach_Probe'
variable_detach_macro = 'Dock_Probe'
variable_purge_height = 0.8
variable_tip_distance = 0
variable_purge_margin = 10
variable_purge_amount = 30
variable_flow_rate = 12
variable_smart_park_height = 10
gcode = 
	
	{action_respond_info(" Running the KAMP_Settings macro does nothing, it is only used for storing KAMP settings. ")}

[gcode_macro BED_MESH_CALIBRATE]
rename_existing = _BED_MESH_CALIBRATE
gcode = 
	
	{% set all_points = printer.exclude_object.objects | map(attribute='polygon') | sum(start=[]) %}
	{% set bed_mesh_min = printer.configfile.settings.bed_mesh.mesh_min %}
	{% set bed_mesh_max = printer.configfile.settings.bed_mesh.mesh_max %}
	{% set probe_count = printer.configfile.settings.bed_mesh.probe_count %}
	{% set verbose_enable = printer["gcode_macro _KAMP_Settings"].verbose_enable | abs %}
	{% set probe_dock_enable = printer["gcode_macro _KAMP_Settings"].probe_dock_enable | abs %}
	{% set attach_macro = printer["gcode_macro _KAMP_Settings"].attach_macro | string %}
	{% set detach_macro = printer["gcode_macro _KAMP_Settings"].detach_macro | string %}
	{% set mesh_margin = printer["gcode_macro _KAMP_Settings"].mesh_margin | float %}
	{% set fuzz_amount = printer["gcode_macro _KAMP_Settings"].fuzz_amount | float %}
	{% set probe_count = probe_count if probe_count|length > 1 else probe_count * 2  %}
	{% set max_probe_point_distance_x = ( bed_mesh_max[0] - bed_mesh_min[0] ) / (probe_count[0] - 1)  %}
	{% set max_probe_point_distance_y = ( bed_mesh_max[1] - bed_mesh_min[1] ) / (probe_count[1] - 1)  %}
	{% set x_min = all_points | map(attribute=0) | min | default(bed_mesh_min[0]) %}
	{% set y_min = all_points | map(attribute=1) | min | default(bed_mesh_min[1]) %}
	{% set x_max = all_points | map(attribute=0) | max | default(bed_mesh_max[0]) %}
	{% set y_max = all_points | map(attribute=1) | max | default(bed_mesh_max[1]) %}
	
	{% set fuzz_range = range((0) | int, (fuzz_amount * 100) | int + 1) %}
	{% set adapted_x_min = (bed_mesh_min[0] + fuzz_amount - mesh_margin, x_min) | max - (fuzz_range | random / 100.0) %}
	{% set adapted_y_min = (bed_mesh_min[1] + fuzz_amount - mesh_margin, y_min) | max - (fuzz_range | random / 100.0) %}
	{% set adapted_x_max = (bed_mesh_max[0] - fuzz_amount + mesh_margin, x_max) | min + (fuzz_range | random / 100.0) %}
	{% set adapted_y_max = (bed_mesh_max[1] - fuzz_amount + mesh_margin, y_max) | min + (fuzz_range | random / 100.0) %}
	
	{% set points_x = (((adapted_x_max - adapted_x_min) / max_probe_point_distance_x) | round(method='ceil') | int) + 1 %}
	{% set points_y = (((adapted_y_max - adapted_y_min) / max_probe_point_distance_y) | round(method='ceil') | int) + 1 %}
	
	{% if (([points_x, points_y]|max) > 6) %}
	{% set algorithm = "bicubic" %}
	{% set min_points = 4 %}
	{% else %}
	{% set algorithm = "lagrange" %}
	{% set min_points = 3 %}
	{% endif %}
	
	{% set points_x = [points_x, min_points]|max %}
	{% set points_y = [points_y, min_points]|max %}
	{% set points_x = [points_x, probe_count[0]]|min %}
	{% set points_y = [points_y, probe_count[1]]|min %}
	
	{% if verbose_enable == True %}
	
	{ action_respond_info( "Algorithm: {}.".format(
	(algorithm),
	)) }
	
	{ action_respond_info("Default probe count: {},{}.".format(
	(probe_count[0]),
	(probe_count[1]),
	)) }
	
	{ action_respond_info("Adapted probe count: {},{}.".format(
	(points_x),
	(points_y),
	)) }
	
	{action_respond_info("Default mesh bounds: {}, {}.".format(
	(bed_mesh_min[0],bed_mesh_min[1]),
	(bed_mesh_max[0],bed_mesh_max[1]),
	)) }
	
	{% if mesh_margin > 0 %}
	{action_respond_info("Mesh margin is {}, mesh bounds extended by {}mm.".format(
	(mesh_margin),
	(mesh_margin),
	)) }
	{% else %}
	{action_respond_info("Mesh margin is 0, margin not increased.")}
	{% endif %}
	
	{% if fuzz_amount > 0 %}
	{action_respond_info("Mesh point fuzzing enabled, points fuzzed up to {}mm.".format(
	(fuzz_amount),
	)) }
	{% else %}
	{action_respond_info("Fuzz amount is 0, mesh points not fuzzed.")}
	{% endif %}
	
	{ action_respond_info("Adapted mesh bounds: {}, {}.".format(
	(adapted_x_min, adapted_y_min),
	(adapted_x_max, adapted_y_max),
	)) }
	
	{action_respond_info("KAMP adjustments successful. Happy KAMPing!")}
	
	{% endif %}
	
	{% if probe_dock_enable == True %}
	{attach_macro}
	{% endif %}
	
	_BED_MESH_CALIBRATE mesh_min={adapted_x_min},{adapted_y_min} mesh_max={adapted_x_max},{adapted_y_max} ALGORITHM={algorithm} PROBE_COUNT={points_x},{points_y}
	
	{% if probe_dock_enable == True %}
	{detach_macro}
	{% endif %}

[gcode_macro LINE_PURGE]
description = A purge macro that adapts to be near your actual printed objects
gcode = 
	
	{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}
	{% set cross_section = printer.configfile.settings.extruder.max_extrude_cross_section | float %}
	
	
	{% if printer.firmware_retraction is defined %}
	{% set RETRACT = G10 | string %}
	{% set UNRETRACT = G11 | string %}
	{% else %}
	{% set RETRACT = 'G1 E-.5 F2100' | string %}
	{% set UNRETRACT = 'G1 E.5 F2100' | string %}
	{% endif %}
	
	
	{% set verbose_enable = printer["gcode_macro _KAMP_Settings"].verbose_enable | abs %}
	{% set purge_height = printer["gcode_macro _KAMP_Settings"].purge_height | float %}
	{% set tip_distance = printer["gcode_macro _KAMP_Settings"].tip_distance | float %}
	{% set purge_margin = printer["gcode_macro _KAMP_Settings"].purge_margin | float %}
	{% set purge_amount = printer["gcode_macro _KAMP_Settings"].purge_amount | float %}
	{% set flow_rate = printer["gcode_macro _KAMP_Settings"].flow_rate | float %}
	
	
	
	{% set all_points = printer.exclude_object.objects | map(attribute='polygon') | sum(start=[]) %}
	{% set purge_x_min = (all_points | map(attribute=0) | min | default(0)) %}
	{% set purge_x_max = (all_points | map(attribute=0) | max | default(0)) %}
	{% set purge_y_min = (all_points | map(attribute=1) | min | default(0)) %}
	{% set purge_y_max = (all_points | map(attribute=1) | max | default(0)) %}
	
	{% set purge_x_center = ([((purge_x_max + purge_x_min) / 2) - (purge_amount / 2), 0] | max) %}
	{% set purge_y_center = ([((purge_y_max + purge_y_min) / 2) - (purge_amount / 2), 0] | max) %}
	
	{% set purge_x_origin = ([purge_x_min - purge_margin, 0] | max) %}
	{% set purge_y_origin = ([purge_y_min - purge_margin, 0] | max) %}
	
	
	{% set purge_move_speed = (flow_rate / 5.0) * 60 | float %}
	
	{% if cross_section < 5 %}
	
	{action_respond_info("[Extruder] max_extrude_cross_section is insufficient for purge, please set it to 5 or greater. Purge skipped.")}
	
	{% else %}
	
	{% if verbose_enable == True %}
	
	{action_respond_info("Moving filament tip {}mms".format(
	(tip_distance),
	)) }
	{% endif %}
	
	{% if printer.firmware_retraction is defined %}
	{action_respond_info("KAMP purge is using firmware retraction.")}
	{% else %}
	{action_respond_info("KAMP purge is not using firmware retraction, it is recommended to configure it.")}
	{% endif %}
	
	{% if purge_y_origin > 0 %}
	
	{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm/s3.".format(
	(purge_x_center),
	(purge_y_origin),
	(purge_amount),
	(flow_rate),
	)) }
	
	{% else %}
	
	{action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm/s3.".format(
	(purge_x_origin),
	(purge_y_center),
	(purge_amount),
	(flow_rate),
	)) }
	
	{% endif %}
	
	{% if purge_y_origin > 0 %}
	
	G92 E0
	G0 F{travel_speed}
	G90
	G0 X{purge_x_center} Y{purge_y_origin}
	G0 Z{purge_height}
	M83
	G1 E{tip_distance} F{purge_move_speed}
	G1 X{purge_x_center + purge_amount} E{purge_amount} F{purge_move_speed}
	{RETRACT}
	G92 E0
	M82
	G0 Z{purge_height * 2} F{travel_speed}
	
	{% else %}
	
	G92 E0
	G0 F{travel_speed}
	G90
	G0 X{purge_x_origin} Y{purge_y_center}
	G0 Z{purge_height}
	M83
	G1 E{tip_distance} F{purge_move_speed}
	G1 Y{purge_y_center + purge_amount} E{purge_amount} F{purge_move_speed}
	{RETRACT}
	G92 E0
	M82
	G0 Z{purge_height * 2} F{travel_speed}
	
	{% endif %}
	
	{% endif %}

[gcode_macro VORON_PURGE]
description = A purge macro that adapts to be near your actual printed objects
gcode = 
	
	{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}
	{% set cross_section = printer.configfile.settings.extruder.max_extrude_cross_section | float %}
	
	
	{% if printer.firmware_retraction is defined %}
	{% set RETRACT = G10 | string %}
	{% set UNRETRACT = G11 | string %}
	{% else %}
	{% set RETRACT = 'G1 E-.5 F2100' | string %}
	{% set UNRETRACT = 'G1 E.5 F2100' | string %}
	{% endif %}
	
	
	{% set verbose_enable = printer["gcode_macro _KAMP_Settings"].verbose_enable | abs %}
	{% set purge_height = printer["gcode_macro _KAMP_Settings"].purge_height | float %}
	{% set tip_distance = printer["gcode_macro _KAMP_Settings"].tip_distance | float %}
	{% set purge_margin = printer["gcode_macro _KAMP_Settings"].purge_margin | float %}
	{% set purge_amount = printer["gcode_macro _KAMP_Settings"].purge_amount | float %}
	{% set flow_rate = printer["gcode_macro _KAMP_Settings"].flow_rate | float %}
	{% set size = 10 | float %}
	
	
	{% set all_points = printer.exclude_object.objects | map(attribute='polygon') | sum(start=[]) %}
	{% set purge_x_min = (all_points | map(attribute=0) | min | default(0)) %}
	{% set purge_x_max = (all_points | map(attribute=0) | max | default(0)) %}
	{% set purge_y_min = (all_points | map(attribute=1) | min | default(0)) %}
	{% set purge_y_max = (all_points | map(attribute=1) | max | default(0)) %}
	
	{% set purge_x_center = ([((purge_x_max + purge_x_min) / 2) - (purge_amount / 2), 0] | max) %}
	{% set purge_y_center = ([((purge_y_max + purge_y_min) / 2) - (purge_amount / 2), 0] | max) %}
	
	{% set purge_x_origin = ([purge_x_min - purge_margin, 0] | max) %}
	{% set purge_y_origin = ([purge_y_min - purge_margin, 0] | max) %}
	
	
	{% set purge_move_speed = (flow_rate / 5.0) * 60 | float %}
	
	{% if cross_section < 5 %}
	
	{action_respond_info("[Extruder] max_extrude_cross_section is insufficient for purge, please set it to 5 or greater. Purge skipped.")}
	
	{% else %}
	
	{% if verbose_enable == True %}
	
	{action_respond_info("Moving filament tip {}mms".format(
	(tip_distance),
	)) }
	{% endif %}
	
	{% if printer.firmware_retraction is defined %}
	{action_respond_info("KAMP purge is using firmware retraction.")}
	{% else %}
	{action_respond_info("KAMP purge is not using firmware retraction, it is recommended to configure it.")}
	{% endif %}
	
	G92 E0
	G0 F{travel_speed}
	G90
	G0 X{purge_x_origin} Y{purge_y_origin+size/2}
	G0 Z{purge_height}
	M83
	G1 E{tip_distance} F{purge_move_speed}
	G1 X{purge_x_origin+size*0.289} Y{purge_y_origin+size} E{purge_amount/4} F{purge_move_speed}
	G1 E-.5 F2100
	G0 Z{purge_height*2}
	G0 X{purge_x_origin+size*0.789} Y{purge_y_origin+size}
	G0 Z{purge_height}
	G1 E.5 F2100
	G1 X{purge_x_origin+size*0.211} Y{purge_y_origin} E{purge_amount/2} F{purge_move_speed}
	G1 E-.5 F2100
	G0 Z{purge_height*2}
	G0 X{purge_x_origin+size*0.711} Y{purge_y_origin}
	G0 Z{purge_height}
	G1 E.5 F2100
	G1 X{purge_x_origin+size} Y{purge_y_origin+size/2}  E{purge_amount/4} F{purge_move_speed}
	G1 E-.5 F2100
	G92 E0
	M82
	G0 Z{purge_height*2} F{travel_speed}
	
	{% endif %}

[gcode_macro Smart_Park]
description = Parks your printhead near the print area for pre-print hotend heating.
gcode = 
	
	{% set z_height = printer["gcode_macro _KAMP_Settings"].smart_park_height | float %}
	{% set center_x = printer.toolhead.axis_maximum.x / 2 | float %}
	{% set center_y = printer.toolhead.axis_maximum.y / 2 | float %}
	{% set all_points = printer.exclude_object.objects | map(attribute='polygon') | sum(start=[]) %}
	{% set x_min = all_points | map(attribute=0) | min | default(center_x) %}
	{% set y_min = all_points | map(attribute=1) | min | default(center_y) %}
	{% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}
	
	G0 X{x_min} Y{y_min} F{travel_speed}
	G0 Z{z_height}

[gcode_shell_command generate_shaper_graph_x]
command = /home/cereal/printer_data/config/shell_scripts/generate-shaper-graph-x.sh
timeout = 60.
verbose = True

[gcode_shell_command generate_shaper_graph_y]
command = /home/cereal/printer_data/config/shell_scripts/generate-shaper-graph-y.sh
timeout = 60.
verbose = True

[gcode_shell_command generate_belt_tension_graph]
command = /home/cereal/printer_data/config/shell_scripts/generate-belt-tension-graph.sh
timeout = 90.
verbose = True

[gcode_macro GENERATE_SHAPER_GRAPHS]
description = Genarates input shaper resonances graphs for analysis. Uses the AXIS parameter for if you only want to do one axis at a time, (eg. GENERATE_SHAPER_GRAPHS AXIS=X)
gcode = 
	{% if params.AXIS is defined %}
	{% if params.AXIS|lower == 'x' %}
	MAYBE_HOME
	TEST_RESONANCES AXIS=X
	RUN_SHELL_COMMAND CMD=generate_shaper_graph_x
	RESPOND MSG="Input shaper graph generated for the X axis. You'll find it in the input_shaper folder in the machine tab!"
	{% elif params.AXIS|lower == 'y' %}
	MAYBE_HOME
	TEST_RESONANCES AXIS=Y
	RUN_SHELL_COMMAND CMD=generate_shaper_graph_y
	RESPOND MSG="Input shaper graph generated for the Y axis. You'll find it in the input_shaper folder in the machine tab!"
	{% else %}
	{action_raise_error("Unknown axis specified. Expected X or Y.")}
	{% endif %}
	{% else %}
	MAYBE_HOME
	TEST_RESONANCES AXIS=X
	TEST_RESONANCES AXIS=Y
	RUN_SHELL_COMMAND CMD=generate_shaper_graph_x
	RUN_SHELL_COMMAND CMD=generate_shaper_graph_y
	RESPOND MSG="Input shaper graphs generated for X and Y. You'll find them in the input_shaper folder in the machine tab!"
	{% endif %}

[gcode_macro MEASURE_COREXY_BELT_TENSION]
description = Generates resonance graph used to ensure belts are equally tensioned.
gcode = 
	TEST_RESONANCES AXIS=1,1  OUTPUT=raw_data NAME=belt-tension-upper
	TEST_RESONANCES AXIS=1,-1 OUTPUT=raw_data NAME=belt-tension-lower
	RUN_SHELL_COMMAND CMD=generate_belt_tension_graph
	RESPOND MSG="Belt tension graphs generated. You'll find them in the input_shaper folder in the machine tab!"

[gcode_macro auto_config_input_shaping]
description = This will generate input shaper values and automatically save them to the configuration.
gcode = 
	{% if params.AXIS is defined %}
	{% if params.AXIS|lower == 'x' %}
	MAYBE_HOME
	SHAPER_CALIBRATE AXIS=x
	RESPOND MSG="X axis Test Completed! Saving config and restarting."
	{% elif params.AXIS|lower == 'y' %}
	MAYBE_HOME
	SHAPER_CALIBRATE AXIS=y
	RESPOND MSG="Y axis Test Completed! Saving config and restarting."
	{% else %}
	{action_raise_error("Unknown axis specified. Expected X or Y.")}
	{% endif %}
	{% else %}
	MAYBE_HOME
	SHAPER_CALIBRATE AXIS=x
	SHAPER_CALIBRATE AXIS=y
	RESPOND MSG="Input shaper Calibration Completed. Saving config and restarting."
	SAVE_CONFIG
	{% endif %}

[neopixel sb_leds]
pin = EBBCan:PD3
chain_count = 10
color_order = GRB,GRB,GRB,GRB,GRB,GRB,GRB,GRB,GRBW,GRBW
initial_red = 0.0
initial_green = 0.0
initial_blue = 1.0
initial_white = 0.0

[gcode_macro _sb_vars]
variable_colors = {
	'logo': {
	'busy': {'r': 0.4, 'g': 0.0, 'b': 0.0, 'w': 0.0},
	'cleaning': {'r': 0.0, 'g': 0.02, 'b': 0.5, 'w': 0.0},
	'calibrating_z': {'r': 0.8, 'g': 0., 'b': 0.35, 'w': 0.0},
	'heating': {'r': 0.3, 'g': 0.18, 'b': 0.0, 'w': 0.0},
	'homing': {'r': 0.0, 'g': 0.6, 'b': 0.2, 'w': 0.0},
	'leveling': {'r': 0.5, 'g': 0.1, 'b': 0.4, 'w': 0.0},
	'meshing': {'r': 0.2, 'g': 1.0, 'b': 0.0, 'w': 0.0},
	'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},
	'printing': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},
	'standby': {'r': 0.01, 'g': 0.01, 'b': 0.01, 'w': 0.1},
	},
	'nozzle': {
	'heating': {'r': 0.8, 'g': 0.35, 'b': 0.0, 'w':0.0},
	'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},
	'on': {'r': 0.8, 'g': 0.8, 'b': 0.8, 'w':1.0},
	'standby': {'r': 0.6, 'g': 0.0, 'b': 0.0, 'w':0.0},
	},
	'thermal': {
	'hot': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},
	'cold': {'r': 0.3, 'g': 0.0, 'b': 0.3, 'w': 0.0}
	}
	}
variable_logo_led_name = "sb_leds"
variable_logo_idx = "8"
variable_nozzle_led_name = "sb_leds"
variable_nozzle_idx = "9,10"
variable_thermal_config = {
	'extruder': {
	'cool_temp': 40,
	'leds': 'logo',
	},
	'heater_bed': {
	'cool_temp': 40,
	'leds': 'nozzle',
	},
	}
gcode = 

[led_effect sb_logo_busy]
autostart = false
frame_rate = 24
leds = 
	neopixel:sb_leds (1-8)
layers = 
	breathing  3 1 top (1,0,0)

[led_effect sb_logo_cleaning]
autostart = false
frame_rate = 24
leds = 
	neopixel:sb_leds (1-8)
layers = 
	breathing  3 1 top (0.0, 0.02, 0.5)

[led_effect sb_logo_calibrating_z]
autostart = false
frame_rate = 24
leds = 
	neopixel:sb_leds (1-8)
layers = 
	breathing  3 1 top (0.0, 0.0, 0.35)

[led_effect sb_logo_heating]
leds = 
	neopixel:sb_leds (1,3,7,8,6,2)
autostart = false
frame_rate = 24
layers = 
	comet  0.3  0 add (1, 0.18, 0)

[led_effect sb_logo_cooling]
leds = 
	neopixel:sb_leds (1,3,7,8,6,2)
autostart = false
frame_rate = 24
layers = 
	comet  0.3  0 add (0, 0, 1)

[led_effect sb_logo_homing]
autostart = false
frame_rate = 24
leds = 
	neopixel:sb_leds (1-8)
layers = 
	breathing  3 1 top (0.0, 0.6, 0.2)

[led_effect sb_logo_leveling]
autostart = false
frame_rate = 24
leds = 
	neopixel:sb_leds (1-8)
layers = 
	breathing  3 1 top (0.5, 0.1, 0.4)

[led_effect sb_logo_meshing]
autostart = false
frame_rate = 24
leds = 
	neopixel:sb_leds (1-8)
layers = 
	breathing  3 1 top (0.2, 1.0, 0.0)

[led_effect sb_logo_printing]
autostart = false
frame_rate = 24
leds = 
	neopixel:sb_leds (1-8)
layers = 
	gradient  0.3  1 add (0.3, 0.0, 0.0),(0.3, 0.3, 0.0),(0.3, 0.1, 0.0)

[led_effect sb_logo_standby]
autostart = false
frame_rate = 24
leds = 
	neopixel:sb_leds (1-8)
layers = 
	breathing  3 1 top (0.01, 0.01, 0.01)

[led_effect sb_logo_part_ready]
autostart = false
frame_rate = 24
leds = 
	neopixel:sb_leds (1-8)
layers = 
	breathing  3 1 top (0.0, 1.0, 0.0)

[led_effect sb_nozzle_heating]
autostart = false
frame_rate = 24
leds = 
	neopixel:sb_leds (9,10)
layers = 
	breathing  3 1 top (1.0, 0.18, 0.0, 0.0)

[led_effect sb_nozzle_cooling]
autostart = false
frame_rate = 24
leds = 
	neopixel:sb_leds (9,10)
layers = 
	breathing  3 1 top (0.0, 0.0, 1.0, 0.1)

[led_effect sb_nozzle_standby]
autostart = false
frame_rate = 24
leds = 
	neopixel:sb_leds (9,10)
layers = 
	breathing  3 1 top (0.6, 0.0, 0.0, 0.0)

[led_effect sb_nozzle_part_ready]
autostart = false
frame_rate = 24
leds = 
	neopixel:sb_leds (9,10)
layers = 
	breathing  3 1 top (0.6, 1.0, 0.0, 0.1)

[led_effect sb_critical_error]
leds = 
	neopixel:sb_leds
layers = 
	strobe         1  1.5   add        (1.0,  1.0, 1.0)
	breathing      2  0     difference (0.95, 0.0, 0.0)
	static         1  0     top        (1.0,  0.0, 0.0)
autostart = false
frame_rate = 24
run_on_error = true

[led_effect rainbow]
leds = 
	neopixel:sb_leds
autostart = true
frame_rate = 24
layers = 
	gradient  0.3  1 add (0.3, 0.0, 0.0),(0.0, 0.3, 0.0),(0.0, 0.0, 0.3)

[led_effect set_nozzle_leds]
leds = 
	neopixel:sb_leds (9,10)
autostart = false
frame_rate = 24
layers = 
	static         0  0     top        (0.0,  0.0, 0.0, 1.0)

[led_effect set_logo_leds]
leds = 
	neopixel:sb_leds (1,2,3,4,5,6,7,8)
autostart = false
frame_rate = 24
layers = 
	static         0  0     top        (1.0,  1.0, 1.0)

[gcode_macro set_logo_leds_off]
gcode = 
	SET_LED_EFFECT EFFECT=set_logo_leds STOP=1

[gcode_macro set_logo_leds_on]
gcode = 
	SET_LED_EFFECT EFFECT=set_logo_leds

[gcode_macro set_nozzle_leds_on]
gcode = 
	SET_LED_EFFECT EFFECT=set_nozzle_leds

[gcode_macro set_nozzle_leds_off]
gcode = 
	SET_LED_EFFECT EFFECT=set_nozzle_leds STOP=1

[gcode_macro status_off]
gcode = 
	STOP_LED_EFFECTS

[gcode_macro status_ready]
gcode = 
	STOP_LED_EFFECTS
	SET_LED_EFFECT EFFECT=rainbow

[gcode_macro status_part_ready]
gcode = 
	STOP_LED_EFFECTS
	SET_LED_EFFECT EFFECT=sb_nozzle_part_ready
	SET_LED_EFFECT EFFECT=sb_logo_part_ready

[gcode_macro status_busy]
gcode = 
	STOP_LED_EFFECTS
	SET_LED_EFFECT EFFECT=sb_logo_busy
	set_nozzle_leds_on

[gcode_macro status_heating]
gcode = 
	STOP_LED_EFFECTS
	SET_LED_EFFECT EFFECT=sb_logo_heating
	SET_LED_EFFECT EFFECT=sb_nozzle_heating

[gcode_macro status_cooling]
gcode = 
	STOP_LED_EFFECTS
	SET_LED_EFFECT EFFECT=sb_logo_cooling
	SET_LED_EFFECT EFFECT=sb_nozzle_cooling

[gcode_macro status_leveling]
gcode = 
	STOP_LED_EFFECTS
	SET_LED_EFFECT EFFECT=sb_logo_leveling
	set_nozzle_leds_on

[gcode_macro status_homing]
gcode = 
	STOP_LED_EFFECTS
	SET_LED_EFFECT EFFECT=sb_logo_homing
	set_nozzle_leds_on

[gcode_macro status_cleaning]
gcode = 
	STOP_LED_EFFECTS
	SET_LED_EFFECT EFFECT=sb_logo_cleaning
	set_nozzle_leds_on

[gcode_macro status_meshing]
gcode = 
	STOP_LED_EFFECTS
	SET_LED_EFFECT EFFECT=sb_logo_meshing
	set_nozzle_leds_on

[gcode_macro status_calibrating_z]
gcode = 
	STOP_LED_EFFECTS
	SET_LED_EFFECT EFFECT=sb_logo_calibrating_z
	set_nozzle_leds_on

[gcode_macro status_printing]
gcode = 
	STOP_LED_EFFECTS
	SET_LED_EFFECT EFFECT=sb_logo_printing
	set_nozzle_leds_on

[bed_mesh default]
version = 1
points = 
	-0.050000, -0.072500, -0.080000
	-0.055000, -0.067500, -0.075000
	-0.065000, -0.065000, -0.052500
x_count = 3
y_count = 3
mesh_x_pps = 2
mesh_y_pps = 2
algo = lagrange
tension = 0.2
min_x = 120.0
max_x = 180.0
min_y = 134.5
max_y = 165.5

[input_shaper]
shaper_type_x = 2hump_ei
shaper_freq_x = 75.8
shaper_type_y = 2hump_ei
shaper_freq_y = 54.4
=======================
Loaded MCU 'mcu' 107 commands (v0.11.0-248-gd725dfd3 / gcc: (15:8-2019-q3-1+b1) 8.3.1 20190703 (release) [gcc-8-branch revision 273027] binutils: (2.35.2-2+14+b2) 2.35.2)
MCU 'mcu' config: ADC_MAX=4095 BUS_PINS_i2c1_PA9_PA10=PA9,PA10 BUS_PINS_i2c1_PB6_PB7=PB6,PB7 BUS_PINS_i2c1_PB8_PB9=PB8,PB9 BUS_PINS_i2c2_PB10_PB11=PB10,PB11 BUS_PINS_i2c2_PB13_PB14=PB13,PB14 BUS_PINS_i2c3_PB3_PB4=PB3,PB4 BUS_PINS_spi1=PA6,PA7,PA5 BUS_PINS_spi1a=PB4,PB5,PB3 BUS_PINS_spi2=PB14,PB15,PB13 BUS_PINS_spi2a=PC2,PC3,PB10 BUS_PINS_spi3=PB4,PB5,PB3 CLOCK_FREQ=64000000 MCU=stm32g0b1xx PWM_MAX=255 RESERVE_PINS_USB=PA11,PA12 RESERVE_PINS_crystal=PF0,PF1 STATS_SUMSQ_BASE=256 STEPPER_BOTH_EDGE=1
Configured MCU 'mcu' (1024 moves)
toolhead: max_velocity: 500.000000
max_accel: 12000.000000
max_accel_to_decel: 6000.000000
square_corner_velocity: 5.000000
Args: ['/home/cereal/klipper/klippy/klippy.py', '/home/cereal/printer_data/config/printer.cfg', '-I', '/home/cereal/printer_data/comms/klippy.serial', '-l', '/home/cereal/printer_data/logs/klippy.log', '-a', '/home/cereal/printer_data/comms/klippy.sock']
Git version: 'v0.11.0-248-gd725dfd3-dirty'
Untracked files: klippy/extras/autotune_tmc.py, klippy/extras/gcode_shell_command.py, klippy/extras/led_effect.py, klippy/extras/motor_constants.py
Branch: master
Remote: origin
Tracked URL: https://github.com/Klipper3d/klipper
CPU: 4 core ?
Python: '3.9.2 (default, Feb 28 2021, 17:03:44) \n[GCC 10.2.1 20210110]'
=============== Log rollover at Sat Jul 22 01:43:10 2023 ===============
webhooks client 547586614608: Disconnected
webhooks client 547607439440: New connection
webhooks client 547607439440: Client info {'program': 'Moonraker', 'version': 'v0.8.0-115-gfdc3e0e'}
webhooks: registering remote method 'shutdown_machine' for connection id: 547607439440
webhooks: registering remote method 'reboot_machine' for connection id: 547607439440
webhooks: registering remote method 'pause_job_queue' for connection id: 547607439440
webhooks: registering remote method 'start_job_queue' for connection id: 547607439440
